{"ast":null,"code":"import base64 from 'base-64';\nimport jwt from 'jwt-decode';\nimport axios from \"axios\";\nimport Cookies from 'universal-cookie';\nimport { cookie_time } from \"../config/config\";\nconst cookie = new Cookies(); //import request from \"request\";\n\nexport default class AuthService {\n  // Initializing important variables\n  constructor(domain) {\n    this.domain = domain || 'http://car-booking.com'; // API server domain\n    //this.fetch = this.fetch.bind(this) // React binding stuff\n\n    this.login = this.login.bind(this);\n    this.getProfile = this.getProfile.bind(this);\n    this.setToken = this.setToken.bind(this);\n  }\n\n  login(username, password) {\n    console.log('login'); // Get a token from api server using the fetch api\n\n    return this.fetch(username, password).then(res => {\n      console.log('res', res);\n      this.setToken(res.data[0]); // Setting the token in localStorage\n\n      return Promise.resolve(res);\n    }).catch(err => {\n      console.log(\"AXIOS ERROR: \", err);\n    });\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken(); // GEtting token from localstorage\n\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  isTokenExpired(token) {\n    //console.log(decode())\n    try {\n      if (token != '') {\n        const decoded = base64.decode(token);\n        const token_decoded = jwt(JSON.parse(decoded).token);\n\n        if (token_decoded.exp > 1000) {\n          // Checking if token is expired. N\n          return true;\n        } else return false;\n      } else return false;\n    } catch (err) {\n      console.log(err);\n      return false;\n    }\n  }\n\n  setToken(idToken) {\n    cookie.set('token', idToken, {\n      maxAge: cookie_time\n    });\n    localStorage.setItem('id_token', idToken);\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    let token = localStorage.getItem('id_token');\n    if (token == null) return '';\n    return token;\n  }\n\n  getCookie() {\n    // Retrieves the user token from localStorage\n    let token = cookie.get('token');\n\n    if (token == null) {\n      this.logout();\n      return false;\n    }\n\n    return true;\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    cookie.remove('token');\n    localStorage.removeItem('id_token');\n  }\n\n  getProfile() {\n    // Using jwt-decode npm package to decode the token\n    return base64.decode(this.getToken());\n  }\n\n  fetch(username, password) {\n    console.log('fetch');\n    return axios.post(\"\".concat(this.domain, \"/production/login.php\"), {\n      username: username,\n      password: password\n    });\n  }\n\n  _checkStatus(response) {\n    // raises an error in case response status is not a success\n    if (response.status >= 200 && response.status < 300) {\n      // Success status lies between 200 to 300\n      return response;\n    } else {\n      var error = new Error(response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }\n\n}","map":{"version":3,"sources":["D:\\Marhub\\car-booking\\fontend\\src\\components\\AuthService.js"],"names":["base64","jwt","axios","Cookies","cookie_time","cookie","AuthService","constructor","domain","login","bind","getProfile","setToken","username","password","console","log","fetch","then","res","data","Promise","resolve","catch","err","loggedIn","token","getToken","isTokenExpired","decoded","decode","token_decoded","JSON","parse","exp","idToken","set","maxAge","localStorage","setItem","getItem","getCookie","get","logout","remove","removeItem","post","_checkStatus","response","status","error","Error","statusText"],"mappings":"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","sourcesContent":["import base64 from 'base-64';\r\nimport jwt from 'jwt-decode';\r\nimport axios from \"axios\";\r\nimport Cookies from 'universal-cookie';\r\nimport { cookie_time } from \"../config/config\";\r\nconst cookie =  new Cookies()\r\n//import request from \"request\";\r\nexport default class AuthService {\r\n    // Initializing important variables\r\n    constructor(domain) {\r\n        this.domain = domain || 'http://car-booking.com' // API server domain\r\n        //this.fetch = this.fetch.bind(this) // React binding stuff\r\n        this.login = this.login.bind(this)\r\n        this.getProfile = this.getProfile.bind(this)\r\n        this.setToken = this.setToken.bind(this)\r\n        \r\n    }\r\n\r\n    login(username, password) {\r\n        console.log('login')\r\n        // Get a token from api server using the fetch api\r\n        return this.fetch(username, password).then(res => {\r\n            console.log('res',res)\r\n            this.setToken(res.data[0]) // Setting the token in localStorage\r\n            return Promise.resolve(res);\r\n        }).catch((err) => {\r\n            console.log(\"AXIOS ERROR: \", err);\r\n          })\r\n        \r\n    }\r\n\r\n    loggedIn() {\r\n        // Checks if there is a saved token and it's still valid\r\n        const token = this.getToken() // GEtting token from localstorage\r\n        return !!token && !this.isTokenExpired(token) // handwaiving here\r\n    }\r\n\r\n    isTokenExpired(token) {\r\n        //console.log(decode())\r\n        try {\r\n            if(token != ''){\r\n                const decoded = base64.decode(token);\r\n                const token_decoded = jwt(JSON.parse(decoded).token) \r\n                if (token_decoded.exp > 1000) { // Checking if token is expired. N\r\n                    return true;\r\n                }\r\n                else\r\n                    return false;\r\n            }else\r\n                return false;\r\n        }\r\n        catch (err) {\r\n            console.log(err)\r\n            return false;\r\n        }\r\n    }\r\n\r\n    setToken(idToken) {\r\n\r\n        cookie.set('token', idToken, {maxAge :cookie_time});\r\n        localStorage.setItem('id_token', idToken)\r\n    }\r\n\r\n    getToken() {\r\n        // Retrieves the user token from localStorage\r\n        let token = localStorage.getItem('id_token')\r\n        if(token == null)\r\n        \r\n            return ''\r\n        return token    \r\n    }\r\n    getCookie() {\r\n        // Retrieves the user token from localStorage\r\n        let token = cookie.get('token')\r\n        if(token == null){\r\n            this.logout()\r\n            return false\r\n        }\r\n            \r\n        return true    \r\n    }\r\n    logout() {\r\n        // Clear user token and profile data from localStorage\r\n        cookie.remove('token');\r\n        localStorage.removeItem('id_token');\r\n    }\r\n\r\n    getProfile() {\r\n        // Using jwt-decode npm package to decode the token\r\n        return base64.decode(this.getToken())\r\n    }\r\n\r\n\r\n    fetch(username,password) {\r\n        console.log('fetch')\r\n        return axios.post(`${this.domain}/production/login.php`,{\r\n            username: username,\r\n            password: password,\r\n        })\r\n    }\r\n\r\n    _checkStatus(response) {\r\n        // raises an error in case response status is not a success\r\n        if (response.status >= 200 && response.status < 300) { // Success status lies between 200 to 300\r\n            return response\r\n        } else {\r\n            var error = new Error(response.statusText)\r\n            error.response = response\r\n            throw error\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}